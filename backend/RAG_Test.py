from pymongo import MongoClient
from langchain_community.embeddings import OpenAIEmbeddings
from langchain_community.vectorstores import MongoDBAtlasVectorSearch
from langchain_community.document_loaders import DirectoryLoader
from langchain_community.llms.openai import OpenAI
from langchain_community.chat_models import ChatOpenAI
from langchain.chains.retrieval_qa.base import RetrievalQA
from langchain.chains.question_answering import load_qa_chain
import gradio as gr
from gradio.themes.base import Base
import os
import credentials
from sentence_transformers import SentenceTransformer
import requests
from langchain_google_genai import ChatGoogleGenerativeAI
import google.generativeai as genai
from langchain_core.prompts import PromptTemplate


Mongo_client = MongoClient(credentials.MONGO_URI)
dbName="test"
collectionName = "notes_embedding"
collection = Mongo_client[dbName][collectionName]

loader = DirectoryLoader('./python/sample_files',glob="./*.txt",show_progress=True)
data = loader.load()

embeddings = OpenAIEmbeddings(openai_api_key=credentials.OPEN_AI_KEY)

vectorStore = MongoDBAtlasVectorSearch.from_documents(data,embeddings,collection=collection)

prompt = PromptTemplate(template = credentials.prompt_template , input_variables = ["context", "question"])
def query_data(query):
    docs = vectorStore.similarity_search(query,K=1)
    as_output = docs[0].page_content
    llm = OpenAI(openai_api_key=credentials.OPEN_AI_KEY)
    retriever = vectorStore.as_retriever()
    chain = RetrievalQA.from_chain_type(llm,chain_type="stuff",retriever=retriever)
    retriever_output = chain.run(query)
    return as_output, retriever_output

with gr.Blocks(theme=Base(),title="Question Answering App using Vector Search + RAG") as demo:
    gr.Markdown(
        """
        #Question Answering App using Atlas Vector Search + RAG Architecture
        """
    )
    textbox = gr.Textbox(label="Enter Your Question:")
    with gr.Row():
        button = gr.Button("Submit",variant="primary")
    with gr.Column():
        output1 = gr.Textbox(lines=1 , max_lines=10 , label="Output with just Atlas Vector Search")
        output2 = gr.Textbox(lines=1, max_lines=10 , label= "Output generated by chaining Atlas Vector Search to LangChain's RetrieverQA")

    button.click(query_data , textbox , outputs=[output1,output2])

demo.launch()

